# Generated by: gemini-2.0-flash-lite
# Timestamp: 20250422_225344
# This is the latest generated code (fixed filename)

# Generated by: gemini-2.0-flash-lite
# Timestamp: 20250422_225340
# This is the latest generated code (fixed filename)
import bpy
import bmesh
import math
# 用户描述: 为一个名为「小熊」的卡通角色创建完整3D模型，要求如下：
# 1. 整体风格：卡通风格，适合动画或3D打印。外观造型简洁夸张，强调拟人化与可爱感。
# 2. 部件构成（以下结构应作为基本组成）：
#    - 头部：一个球体，作为角色主要结构，放置在中心位置。
#    - 耳朵：两个小球体，对称分布在头部左右上方。
#    - 眼睛：两个球体，位于头部前方，对称分布。
#    - 嘴巴：一个甜甜圈，位于头部下部中央，表现嘴部结构。
#    - 手臂：两个细长圆柱体，从身体两侧延伸，位置自然。
#    - 腿部：两个较粗圆柱体，位于身体底部用于支撑角色。
#    - 配件（可选）：背包、帽子、尾巴、胡子等附加部件，可增强角色个性。
# 3. 比例要求：各部件位置、大小比例协调，符合视觉美感与结构合理性。
# 4. 脚本功能要求：
#    - 所有建模结构用Blender Python API实现，使用原始几何体。
#    - 添加log()函数记录每一步构建进程。
#    - 使用join()将所有模型合并为单一对象，命名为角色名。
#    - 不使用bpy.ops.object.select_all(action='SELECT')清空场景，以防影响现有模型。
character_name = "小熊"
def log(message):
    print(f"Log: {message}")
def create_sphere(name, location, radius):
    bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=location, enter_editmode=False, align='WORLD', )
    sphere = bpy.context.active_object
    sphere.name = name
    log(f"Created sphere: {name} at {location} with radius {radius}")
    return sphere
def create_cylinder(name, location, radius, height):
    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=location, enter_editmode=False, align='WORLD', )
    cylinder = bpy.context.active_object
    cylinder.name = name
    log(f"Created cylinder: {name} at {location} with radius {radius} and height {height}")
    return cylinder
def create_torus(name, location, radius, tube_radius):
    bpy.ops.mesh.primitive_torus_add(major_radius=radius, minor_radius=tube_radius, location=location, enter_editmode=False, align='WORLD', )
    torus = bpy.context.active_object
    torus.name = name
    log(f"Created torus: {name} at {location} with radius {radius} and tube_radius {tube_radius}")
    return torus
def create_cone(name, location, radius1, radius2, height):
    bpy.ops.mesh.primitive_cone_add(radius1=radius1, radius2=radius2, depth=height, location=location, enter_editmode=False, align='WORLD', )
    cone = bpy.context.active_object
    cone.name = name
    log(f"Created cone: {name} at {location} with radius1 {radius1}, radius2 {radius2} and height {height}")
    return cone
def create_head():
    head = create_sphere("head", (0, 0, 1), 0.8)
    return head
def create_ears():
    ear_left = create_sphere("ear_left", (-0.6, 0.5, 1.8), 0.2)
    ear_right = create_sphere("ear_right", (0.6, 0.5, 1.8), 0.2)
    return [ear_left, ear_right]
def create_eyes():
    eye_left = create_sphere("eye_left", (-0.3, 0.75, 1.2), 0.15)
    eye_right = create_sphere("eye_right", (0.3, 0.75, 1.2), 0.15)
    return [eye_left, eye_right]
def create_mouth():
    mouth = create_torus("mouth", (0, -0.2, 0.7), 0.2, 0.08)
    mouth.rotation_euler[0] = math.radians(90)
    return mouth
def create_arms():
    arm_left = create_cylinder("arm_left", (-1.2, 0, 0.5), 0.1, 1.0)
    arm_right = create_cylinder("arm_right", (1.2, 0, 0.5), 0.1, 1.0)
    return [arm_left, arm_right]
def create_legs():
    leg_left = create_cylinder("leg_left", (-0.3, 0, -0.5), 0.2, 1.0)
    leg_right = create_cylinder("leg_right", (0.3, 0, -0.5), 0.2, 1.0)
    return [leg_left, leg_right]
def create_backpack():
    backpack = create_cube("backpack", (0, -0.3, 1.0), 0.6)
    backpack.scale[1] = 0.2
    return backpack
def create_cube(name, location, size):
    bpy.ops.mesh.primitive_cube_add(size=size, location=location, enter_editmode=False, align='WORLD', )
    cube = bpy.context.active_object
    cube.name = name
    log(f"Created cube: {name} at {location} with size {size}")
    return cube
def create_tail():
    tail = create_cone("tail", (0, -0.8, -0.5), 0.15, 0.05, 0.4)
    tail.rotation_euler[0] = math.radians(90)
    return tail
def join_objects(objects, name):
    if not objects:
        log("No objects to join.")
        return None
    # Deselect all objects
    bpy.ops.object.select_all(action='DESELECT')
    # Select objects to join
    for obj in objects:
        if obj:
            obj.select_set(True)
    # Set active object (important for join)
    if objects[0]:
        bpy.context.view_layer.objects.active = objects[0]
    # Join objects
    try:
        bpy.ops.object.join()
        joined_object = bpy.context.active_object
        joined_object.name = name
        log(f"Joined objects into: {name}")
        return joined_object
    except RuntimeError as e:
        log(f"Join failed: {e}")
        return None
def check_mechanical_principles(model):
    # Basic check: Does the model have a base for stability?
    if model:
        if any(obj.name.startswith("leg") for obj in bpy.data.objects if obj.type == 'MESH'):
            log("Mechanical Check: Base structure (legs) present - PASS")
        else:
            log("Mechanical Check: Base structure (legs) missing - FAIL")
        # Check for reasonable proportions (very basic)
        head = bpy.data.objects.get("head")
        if head:
            if head.scale.x > 0.5 and head.scale.x < 2:
                log("Mechanical Check: Head size reasonable - PASS")
            else:
                log("Mechanical Check: Head size unreasonable - FAIL")
    else:
        log("Mechanical Check: No model to check - FAIL")
def check_physical_principles(model):
    # Basic check: Does the model have a closed volume (for potential fluid simulation)?
    if model:
        # This is a very basic check and needs more sophisticated methods for real-world scenarios.
        # Check if any mesh has a volume.
        has_volume = False
        for obj in bpy.data.objects:
            if obj.type == 'MESH':
                mesh = obj.data
                if mesh.polygons:
                    has_volume = True
                    break
        if has_volume:
            log("Physical Check: Model has potential volume - PASS")
        else:
            log("Physical Check: Model has no volume - FAIL")
    else:
        log("Physical Check: No model to check - FAIL")
def check_appearance(model):
    # Basic check: Are the proportions somewhat reasonable?
    if model:
        head = bpy.data.objects.get("head")
        if head:
            if head.scale.x > 0.5 and head.scale.x < 2:
                log("Appearance Check: Head size reasonable - PASS")
            else:
                log("Appearance Check: Head size unreasonable - FAIL")
        ears = [obj for obj in bpy.data.objects if obj.name.startswith("ear")]
        if ears:
            if all(ear.scale.x < head.scale.x * 0.5 for ear in ears):
                log("Appearance Check: Ears size reasonable - PASS")
            else:
                log("Appearance Check: Ears size unreasonable - FAIL")
    else:
        log("Appearance Check: No model to check - FAIL")
def check_structure(model):
    # Basic check: Are the parts connected? (very simplified)
    if model:
        # Check if arms and legs are present
        arms = [obj for obj in bpy.data.objects if obj.name.startswith("arm")]
        legs = [obj for obj in bpy.data.objects if obj.name.startswith("leg")]
        if arms and legs:
            log("Structure Check: Arms and legs present - PASS")
        else:
            log("Structure Check: Arms or legs missing - FAIL")
    else:
        log("Structure Check: No model to check - FAIL")
def main():
    # Create the character components
    head = create_head()
    ears = create_ears()
    eyes = create_eyes()
    mouth = create_mouth()
    arms = create_arms()
    legs = create_legs()
    backpack = create_backpack()
    tail = create_tail()
    # Collect all objects to join
    objects_to_join = [head] + ears + eyes + [mouth] + arms + legs + [backpack, tail]
    # Join all objects into a single object
    character = join_objects(objects_to_join, character_name)
    # Perform checks
    check_mechanical_principles(character)
    check_physical_principles(character)
    check_appearance(character)
    check_structure(character)
    log("Character creation complete.")
bpy.app.timers.register(main)