# Generated by: gemini-2.0-flash-lite
# Timestamp: 20250422_194513
# This is the latest generated code (fixed filename)

import bpy
import bmesh
import math
# 用户描述: 为一个名为「小黄人」的卡通角色创建完整3D模型，要求如下：
# 1. 整体风格：
#    - 采用卡通风格，适合动画或3D打印。
#    - 外观造型简洁夸张，强调拟人化与可爱感。
# 2. 部件构成（以下结构应作为基本组成）：
#    - 头部：一个球体，作为角色主要结构，放置在中心位置。
#    - 耳朵：两个小球体，对称分布在头部左右上方。
#    - 眼睛：两个球体，位于头部前方，对称分布。
#    - 嘴巴：一个甜甜圈，位于头部下部中央，表现嘴部结构。
#    - 手臂：两个细长圆柱体，从身体两侧延伸，位置自然。
#    - 腿部：两个较粗圆柱体，位于身体底部用于支撑角色。
#    - 配件（可选）：
#      - 背包、帽子、尾巴、胡子等附加部件，可增强角色个性。
#      - 比如帽子使用一个上半球，背包使用一个缩放后的立方体。
# 3. 比例要求：
#    - 各部件位置、大小比例协调，符合视觉美感与结构合理性。
# 4. 脚本功能要求：
#    - 所有建模结构用Blender Python API实现，使用原始几何体。
#    - 添加log()函数记录每一步构建进程。
#    - 使用join()将所有模型合并为单一对象，命名为角色名。
#    - 不使用bpy.ops.object.select_all(action='SELECT')清空场景，以防影响现有模型。
character_name = "小黄人"
def log(message):
    print(f"[{character_name}] {message}")
def create_sphere(name, location, radius):
    bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=location, enter_editmode=False, align='WORLD', )
    sphere = bpy.context.active_object
    sphere.name = name
    log(f"Created sphere: {name} at {location} with radius {radius}")
    return sphere
def create_cylinder(name, location, radius, height):
    bpy.ops.mesh.primitive_cylinder_add(radius=radius, depth=height, location=location, enter_editmode=False, align='WORLD', )
    cylinder = bpy.context.active_object
    cylinder.name = name
    log(f"Created cylinder: {name} at {location} with radius {radius} and height {height}")
    return cylinder
def create_torus(name, location, radius, tube_radius):
    bpy.ops.mesh.primitive_torus_add(major_radius=radius, minor_radius=tube_radius, location=location, enter_editmode=False, align='WORLD', )
    torus = bpy.context.active_object
    torus.name = name
    log(f"Created torus: {name} at {location} with radius {radius} and tube_radius {tube_radius}")
    return torus
def create_half_sphere(name, location, radius):
    bpy.ops.mesh.primitive_uv_sphere_add(radius=radius, location=location, enter_editmode=False, align='WORLD', )
    sphere = bpy.context.active_object
    sphere.name = name
    bpy.ops.object.mode_set(mode='EDIT')
    bpy.ops.mesh.select_mode(type="VERT")
    bm = bmesh.from_edit_mesh(sphere.data)
    for v in bm.verts:
        if v.co.z > 0:
            v.select_set(True)
    bmesh.ops.delete(bm, geom=bm.verts, context=5)
    bmesh.update_edit_mesh(sphere.data)
    bpy.ops.object.mode_set(mode='OBJECT')
    log(f"Created half sphere: {name} at {location} with radius {radius}")
    return sphere
def create_cube(name, location, size):
    bpy.ops.mesh.primitive_cube_add(size=size, location=location, enter_editmode=False, align='WORLD', )
    cube = bpy.context.active_object
    cube.name = name
    log(f"Created cube: {name} at {location} with size {size}")
    return cube
def create_character():
    # Head
    head = create_sphere("head", (0, 0, 1), 0.7)
    # Ears
    ear_left = create_sphere("ear_left", (-0.7, 0.5, 1.7), 0.2)
    ear_right = create_sphere("ear_right", (0.7, 0.5, 1.7), 0.2)
    # Eyes
    eye_left = create_sphere("eye_left", (-0.3, 0.65, 1), 0.15)
    eye_right = create_sphere("eye_right", (0.3, 0.65, 1), 0.15)
    # Mouth
    mouth = create_torus("mouth", (0, -0.2, 0.6), 0.25, 0.08)
    # Arms
    arm_left = create_cylinder("arm_left", (-1.1, 0, 0.5), 0.1, 1)
    arm_right = create_cylinder("arm_right", (1.1, 0, 0.5), 0.1, 1)
    # Legs
    leg_left = create_cylinder("leg_left", (-0.3, 0, -0.5), 0.2, 1)
    leg_right = create_cylinder("leg_right", (0.3, 0, -0.5), 0.2, 1)
    # Backpack (Optional)
    backpack = create_cube("backpack", (0, -0.5, 1.2), 0.5)
    backpack.scale[1] = 0.2
    # Hat (Optional)
    hat = create_half_sphere("hat", (0, 0, 2.2), 0.5)
    # Join all objects
    objects_to_join = [head, ear_left, ear_right, eye_left, eye_right, mouth, arm_left, arm_right, leg_left, leg_right, backpack, hat]
    bpy.ops.object.select_all(action='DESELECT')
    for obj in objects_to_join:
        obj.select_set(True)
        bpy.context.view_layer.objects.active = obj
    bpy.ops.object.join()
    joined_object = bpy.context.active_object
    joined_object.name = character_name
    log(f"Joined all objects into: {character_name}")
    return joined_object
def check_mechanics(obj):
    # Basic check: is the object above the ground?
    if obj.location.z < 0:
        log("Warning: Object is below the ground.")
    else:
        log("Mechanics Check: Object is above the ground.")
    # Check for balance (very basic)
    if obj.dimensions.z > 0:
        log("Mechanics Check: Object has height.")
    else:
        log("Warning: Object has no height.")
def check_physics(obj):
    log("Physics Check: No specific physics checks implemented.")
def check_aesthetics(obj):
    log("Aesthetics Check: Basic visual inspection required.")
def check_structure(obj):
    log("Structure Check: Basic structural integrity inspection required.")
def main():
    character = create_character()
    check_mechanics(character)
    check_physics(character)
    check_aesthetics(character)
    check_structure(character)
    log("Character creation complete.")
bpy.app.timers.register(main)